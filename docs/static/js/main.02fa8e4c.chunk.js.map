{"version":3,"sources":["components/Form.js","components/Moods.js","App.js","index.js"],"names":["Form","_this$props","this","props","isEmpty","date","repeatedDate","mood","message","getMessage","getDate","getMood","saveDailyMood","react_default","a","createElement","className","action","concat","htmlFor","type","id","onChange","value","checked","placeholder","react_router_dom","onClick","to","React","Component","Moods","moods","length","map","item","index","key","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","JSON","parse","localStorage","getItem","bind","assertThisInitialized","checkDate","event","currentDate","currentTarget","setState","currentMood","currentMessage","_this$state","dailyObject","prevState","newMoods","toConsumableArray","setItem","stringify","preventDefault","_this$state2","undefined","find","_this2","_this$state3","react_router","path","render","components_Form","components_Moods","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.02fa8e4c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    const { isEmpty, date, repeatedDate, mood, message, getMessage, getDate, getMood, saveDailyMood } = this.props;\r\n    return(\r\n      <div className=\"form__container\">\r\n        <form action=\"\" className=\"form__moods\">\r\n          <fieldset className={`form__fieldset fieldset__date ${isEmpty && date === '' ? 'red' : null}`}>\r\n            <label htmlFor=\"date\" className=\"labels label__date\">Date</label>\r\n            <input type=\"date\" className={`input__date ${(repeatedDate) || (isEmpty && date === '') ? 'border-red' : null}`} id=\"date\" onChange={getDate} value={date}/>\r\n            {isEmpty && date === '' ? <p className=\"error__date\">Please, introduce a valid date</p> : null}\r\n            {repeatedDate ? <p className=\"error__date\">You already set a mood for this date</p> : null}\r\n          </fieldset>\r\n          <fieldset className={`form__fieldset fieldset__mood ${isEmpty && mood === '' ? 'red' : null}`}>\r\n            <label htmlFor=\"mood\" className=\"labels label__mood\">Mood</label>\r\n            <div className={`mood__radio--container ${isEmpty && mood === \"\" ? 'border-red' : null}`}>\r\n              <input type=\"radio\" className=\"input__mood input__mood--happy\" id=\"mood\" value=\":)\" onChange={getMood} checked={mood === ':)'}/> :)\r\n              <input type=\"radio\" className=\"input__mood input__mood--sad\" id=\"mood\" value=\":(\" onChange={getMood} checked={mood === ':('}/> :(\r\n            </div>\r\n            {isEmpty && mood === '' ? <p className=\"error__mood\">Please, select an option</p> : null}            \r\n          </fieldset>\r\n          <fieldset className=\"form__fieldset fieldset__message\">\r\n            <label htmlFor=\"message\" className=\"labels label__message\">Message</label>\r\n            {mood !== ':(' ?\r\n              <input type=\"text\" className=\"input__message\" id=\"message\" onChange={getMessage} value={message} placeholder=\"Why was it a good day?\"/>\r\n            :\r\n              <p className=\"message__sad\">It's better to remember the good moments ;)</p>\r\n            }\r\n          </fieldset>\r\n          <Link onClick={saveDailyMood} to=\"/\" className=\"button__link button__save\" >Save</Link>\r\n          <Link to=\"/\" className=\"button__link button__cancel\">Cancel</Link>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  isEmpty: PropTypes.bool.isRequired,\r\n  date: PropTypes.string, \r\n  repeatedDate: PropTypes.bool.isRequired,\r\n  mood: PropTypes.string,\r\n  message: PropTypes.string,\r\n  getMessage: PropTypes.func.isRequired,\r\n  getDate: PropTypes.func.isRequired,\r\n  getMood: PropTypes.func.isRequired,\r\n  saveDailyMood: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Moods extends React.Component {\r\n  render() {\r\n    const {moods} = this.props;\r\n    return(\r\n      <div className=\"moods__container\">\r\n        <Link to=\"/form\" className=\"moods__link\">\r\n          <div className=\"moods__button\">+</div>\r\n        </Link>\r\n        <div className=\"moods\">\r\n          {moods.length === 0 ?\r\n            <p className=\"no__\">Start by adding your mood today!</p>\r\n          :\r\n            <ul className=\"moods__list\">\r\n              {moods.map((item, index) =>\r\n                <li className=\"moods__item\" key={index}>\r\n                  {item.mood === ':)' ?\r\n                    <p className=\"moods__item--happy\">:)</p>\r\n                  :\r\n                    <p className=\"moods__item--sad\">:(</p>\r\n                  }\r\n                </li>\r\n              )}\r\n            </ul>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nMoods.propTypes = {\r\n  moods: PropTypes.arrayOf(PropTypes.object)\r\n}\r\n\r\nexport default Moods;","import React from 'react';\r\nimport Form from './components/Form';\r\nimport Moods from './components/Moods';\r\nimport {Route, Switch} from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      moods: JSON.parse(localStorage.getItem('moods')) || [],\r\n      date: \"\",\r\n      mood: \"\",\r\n      message: \"\",\r\n      isEmpty: false,\r\n      repeatedDate: false\r\n    }\r\n    this.getDate = this.getDate.bind(this);\r\n    this.getMessage = this.getMessage.bind(this);\r\n    this.getMood = this.getMood.bind(this);\r\n    this.saveDailyMood = this.saveDailyMood.bind(this);\r\n    this.checkDate = this.checkDate.bind(this);\r\n  }\r\n\r\n  getDate(event) {\r\n    const currentDate = event.currentTarget.value;\r\n    this.setState({date: currentDate, repeatedDate: false});\r\n  }\r\n\r\n  getMood(event) {\r\n    const currentMood = event.currentTarget.value;\r\n    this.setState({mood: currentMood});\r\n  }\r\n\r\n  getMessage(event) {\r\n    const currentMessage = event.currentTarget.value;\r\n    this.setState({message: currentMessage});\r\n  }\r\n\r\n  saveDailyMood(event) {\r\n    const {date, mood, message} = this.state;\r\n    const dailyObject = {date, mood, message};\r\n    if(date !== '' && mood !== '' && this.checkDate() === true) {\r\n      this.setState(prevState => {\r\n        const newMoods = [...prevState.moods, dailyObject]\r\n        localStorage.setItem('moods', JSON.stringify(newMoods));\r\n        return ({moods : newMoods, date: '', mood: '', message: '', isEmpty: false}); \r\n      });\r\n    } else if (date === '' || mood === ''){\r\n      event.preventDefault();\r\n      this.setState({isEmpty: true});\r\n    } else if (date === '' && mood === ''){\r\n      event.preventDefault();\r\n      this.setState({isEmpty: true});\r\n    } else if(this.checkDate() === false) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  checkDate() {\r\n    const {moods, date} = this.state;\r\n    if (moods.length !== 0) {\r\n      const sameDate = moods.find(item => item.date === date);\r\n      if (sameDate === undefined) {\r\n        return true;\r\n      } else {\r\n        this.setState({repeatedDate: true, date: '', mood: '', message: ''});\r\n        return false;\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { date, message, moods, mood, isEmpty, repeatedDate } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/form\" render={() => (\r\n            <Form\r\n              isEmpty={isEmpty}\r\n              date={date}\r\n              repeatedDate={repeatedDate}\r\n              mood={mood}\r\n              message={message}\r\n              getMessage={this.getMessage}\r\n              getDate={this.getDate}\r\n              getMood={this.getMood}\r\n              saveDailyMood={this.saveDailyMood}\r\n            />\r\n          )}/>\r\n          <Route path=\"/\" render={() => (\r\n            <Moods moods={moods} />)}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}